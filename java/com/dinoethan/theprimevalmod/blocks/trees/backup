package com.dinoethan.theprimevalmod.blocks.trees;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.dinoethan.theprimevalmod.main;
import com.dinoethan.theprimevalmod.init.ModBlocks;
import com.dinoethan.theprimevalmod.init.ModItems;
import com.dinoethan.theprimevalmod.util.IHasModel;
import net.minecraft.block.BlockLeaves;
import net.minecraft.block.BlockPlanks.EnumType;
import net.minecraft.block.SoundType;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.renderer.block.statemap.StateMap;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.NonNullList;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class BlockLeavesBase extends BlockLeaves implements IHasModel
{       
    public static String type;
    
    public BlockLeavesBase(String name) 
    {
        type = name.replaceAll("_leaves", "").trim();
        System.out.println(type);
        
        setUnlocalizedName(name);
        setRegistryName(name);
        setSoundType(SoundType.PLANT);
        this.setLightOpacity(1);
        setCreativeTab(main.primevaltab);
        setDefaultState(this.blockState.getBaseState().withProperty(CHECK_DECAY, Boolean.valueOf(true)).withProperty(DECAYABLE, Boolean.valueOf(true)));
                
        ModBlocks.BLOCKS.add(this);
        ModItems.ITEMS.add(new ItemBlock(this).setRegistryName(this.getRegistryName()));
    }

    @Override
    public Item getItemDropped(IBlockState state, Random rand, int fortune) 
    {
        if(type == "monkeypuzzle") return Item.getItemFromBlock(ModBlocks.MONKEYPUZZLE_SAPLING);
        else return Item.getItemFromBlock(ModBlocks.MONKEYPUZZLE_SAPLING);
    }
    
    @Override
    public int getMetaFromState(IBlockState state) 
    {
        int i = 0;
        if(!((Boolean)state.getValue(DECAYABLE)).booleanValue()) i |= 2;
        if(!((Boolean)state.getValue(CHECK_DECAY)).booleanValue()) i|= 4;
        return i;
    }
    
    @Override
    protected ItemStack getSilkTouchDrop(IBlockState state) 
    {
        return new ItemStack(this);
    }
    
    @Override
    protected int getSaplingDropChance(IBlockState state) {return 30;}
    
    @Override
    public EnumType getWoodType(int meta) {return null;}
    
    @Override
    public List<ItemStack> onSheared(ItemStack item, IBlockAccess world, BlockPos pos, int fortune) 
    {
        return NonNullList.withSize(1, new ItemStack(this));
    }
    
    @Override
    public boolean isOpaqueCube(IBlockState state) 
    {
        return false;
    }
    
    @Override
    protected BlockStateContainer createBlockState() 
    {
        return new BlockStateContainer(this, new IProperty[] {CHECK_DECAY, DECAYABLE});
    }
    
    @Override
    public BlockRenderLayer getBlockLayer() 
    {
        return BlockRenderLayer.TRANSLUCENT;
    }   
    
    @Override
    public void registerModels() 
    {
        main.proxy.registerModel(Item.getItemFromBlock(this), 0);
    }
    
    @Override
     public void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)
     {
      setDefaultState(this.blockState.getBaseState().withProperty(CHECK_DECAY, Boolean.valueOf(true)).withProperty(DECAYABLE, Boolean.valueOf(false)));
     }
}

public static final IBlockState LOG = ModBlocks.MONKEYPUZZLE_LOG.getDefaultState();
    public static final IBlockState LEAF = ModBlocks.MONKEYPUZZLE_LEAVES.getDefaultState();

package com.dinoethan.theprimevalmod.world.generators;

import net.minecraft.block.Block;
import net.minecraft.block.BlockLog;
import net.minecraft.block.state.IBlockState;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;
import org.jurassicraft.server.block.BlockHandler;
import org.jurassicraft.server.block.tree.AncientLeavesBlock;
import org.jurassicraft.server.block.tree.AncientLogBlock;
import org.jurassicraft.server.block.tree.AncientSaplingBlock;
import org.jurassicraft.server.block.tree.TreeType;

import com.dinoethan.theprimevalmod.blocks.trees.BlockLeavesBase;
import com.dinoethan.theprimevalmod.blocks.trees.BlockLogBase;
import com.dinoethan.theprimevalmod.blocks.trees.BlockSaplingBase;

import java.util.Random;

public class AraucariaTreeGenerator extends WorldGenAbstractTree {
    public AraucariaTreeGenerator() {
        super(true);
    }

    @Override
    public boolean generate(World world, Random rand, BlockPos position) {
        IBlockState log = BlockHandler.ANCIENT_LOGS.get(TreeType.ARAUCARIA).getDefaultState();
        IBlockState leaves = BlockHandler.ANCIENT_LEAVES.get(TreeType.ARAUCARIA).getDefaultState();
        int height = rand.nextInt(15) + 10;
        int branchHeight = (int) (height / 1.3);
        for (int y = 0; y < height; y++) {
            BlockPos logPos = position.up(y);
            world.setBlockState(logPos, log);
            if (y > branchHeight) {
                for (EnumFacing facing : EnumFacing.HORIZONTALS) {
                    EnumFacing.Axis axis = facing.getAxis();
                    boolean zAxis = axis == EnumFacing.Axis.Z;
                    if (y % 2 == (facing.getAxisDirection() == EnumFacing.AxisDirection.POSITIVE ? 0 : 1)) {
                        BlockPos branch = logPos.offset(facing);
                        IBlockState facingLog = log.withProperty(BlockLogBase.LOG_AXIS, zAxis ? BlockLog.EnumAxis.Z : BlockLog.EnumAxis.X);
                        world.setBlockState(branch, facingLog);
                        this.generateClump(world, branch, 1.2, leaves);
                        if (y > branchHeight * 1.2) {
                            world.setBlockState(branch.up().offset(facing), facingLog);
                            this.generateClump(world, branch.up().offset(facing), 4, leaves);
                        }
                    }
                }
            }
        }
        if (rand.nextInt(10) == 0) {
            this.generateClump(world, position.up(height), 64, 6, leaves);
            this.generateClump(world, position.up(height), 8, 8, leaves);
        } else {
            this.generateClump(world, position.up(height), 32, 6, leaves);
            this.generateClump(world, position.up(height), 6, 6, leaves);
        }
        this.generateClump(world, position.up(height + 2), 16, 3.5, leaves);
        return true;
    }

    private void generateClump(World world, BlockPos pos, double size, IBlockState state) {
        int blockRadius = (int) Math.ceil(size);
        for (int x = -blockRadius; x < blockRadius; x++) {
            for (int y = -blockRadius; y < blockRadius; y++) {
                for (int z = -blockRadius; z < blockRadius; z++) {
                    if (Math.abs(x * x + y * y + z * z) <= size) {
                        BlockPos leafPos = pos.add(x, y, z);
                        if (world.isAirBlock(leafPos)) {
                            this.setBlockState(world, leafPos, state);
                        }
                    }
                }
            }
        }
    }

    private void generateClump(World world, BlockPos pos, double size, double sizeY, IBlockState state) {
        int blockRadius = (int) Math.ceil(size);
        for (int x = -blockRadius; x < blockRadius; x++) {
            for (int y = -blockRadius; y < blockRadius; y++) {
                for (int z = -blockRadius; z < blockRadius; z++) {
                    if (Math.abs(x * x + (y * y * (size / sizeY)) + z * z) <= size) {
                        BlockPos leafPos = pos.add(x, y, z);
                        if (world.isAirBlock(leafPos)) {
                            this.setBlockState(world, leafPos, state);
                        }
                    }
                }
            }
        }
    }

    private void setBlockState(World world, BlockPos pos, IBlockState state) {
        Block block = world.getBlockState(pos).getBlock();
        if (this.canGrowInto(block) || block instanceof BlockLeavesBase || block instanceof BlockSaplingBase || block instanceof BlockLogBase) {
            world.setBlockState(pos, state);
        }
    }
}
